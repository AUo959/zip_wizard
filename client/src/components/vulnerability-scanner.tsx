import { useState, useEffect, useCallback } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  Shield,
  AlertTriangle,
  XCircle,
  CheckCircle,
  Info,
  Search,
  FileWarning,
  Lock,
  Unlock,
  Bug,
  Zap,
} from 'lucide-react';

interface VulnerabilityScannerProps {
  files?: any[];
  onVulnerabilityFound?: (vulnerability: Vulnerability) => void;
  onScanComplete?: (report: ScanReport) => void;
}

interface Vulnerability {
  id: string;
  severity: 'critical' | 'high' | 'medium' | 'low' | 'info';
  type: string;
  file: string;
  line?: number;
  description: string;
  cve?: string;
  fix?: string;
  references?: string[];
}

interface ScanReport {
  totalVulnerabilities: number;
  critical: number;
  high: number;
  medium: number;
  low: number;
  info: number;
  vulnerabilities: Vulnerability[];
  scanDuration: number;
  filesScanned: number;
  securityScore: number;
}

const VULNERABILITY_PATTERNS = [
  // SQL Injection
  {
    pattern:
      /(\$_(GET|POST|REQUEST)\[['"]?\w+['"]?\]|mysql_query|mysqli_query|pg_query|sqlite_query)/gi,
    type: 'SQL Injection',
    severity: 'critical' as const,
    description: 'Potential SQL injection vulnerability detected',
  },
  // XSS
  {
    pattern: /(innerHTML\s*=|document\.write|eval\(|setTimeout\(|setInterval\()/gi,
    type: 'Cross-Site Scripting (XSS)',
    severity: 'high' as const,
    description: 'Potential XSS vulnerability through unsafe DOM manipulation',
  },
  // Hardcoded Secrets
  {
    pattern:
      /(api[_-]?key|apikey|secret|password|pwd|token|private[_-]?key)\s*[:=]\s*["'][^"']{8,}/gi,
    type: 'Hardcoded Secrets',
    severity: 'critical' as const,
    description: 'Hardcoded credentials or API keys detected',
  },
  // Weak Cryptography
  {
    pattern: /(MD5|SHA1|DES|RC4)/gi,
    type: 'Weak Cryptography',
    severity: 'medium' as const,
    description: 'Use of weak or deprecated cryptographic algorithms',
  },
  // Path Traversal
  {
    pattern: /\.\.[\/\\]|\$_(GET|POST|REQUEST)\[['"]?path['"]?\]/gi,
    type: 'Path Traversal',
    severity: 'high' as const,
    description: 'Potential path traversal vulnerability',
  },
  // Command Injection
  {
    pattern: /(exec\(|system\(|shell_exec\(|passthru\(|proc_open\(|popen\()/gi,
    type: 'Command Injection',
    severity: 'critical' as const,
    description: 'Potential command injection vulnerability',
  },
  // Insecure Deserialization
  {
    pattern: /(unserialize\(|pickle\.loads|yaml\.load\(|JSON\.parse\()/gi,
    type: 'Insecure Deserialization',
    severity: 'high' as const,
    description: 'Potential insecure deserialization vulnerability',
  },
  // CORS Misconfiguration
  {
    pattern: /Access-Control-Allow-Origin:\s*\*/gi,
    type: 'CORS Misconfiguration',
    severity: 'medium' as const,
    description: 'Overly permissive CORS configuration',
  },
];

export function VulnerabilityScanner({
  files = [],
  onVulnerabilityFound,
  onScanComplete,
}: VulnerabilityScannerProps) {
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [scanReport, setScanReport] = useState<ScanReport | null>(null);
  const [selectedVulnerability, setSelectedVulnerability] = useState<Vulnerability | null>(null);
  const [filterSeverity, setFilterSeverity] = useState<string>('all');

  const scanFile = useCallback(
    (file: any): Vulnerability[] => {
      const fileVulnerabilities: Vulnerability[] = [];
      const content = file.content || '';

      if (!content) return fileVulnerabilities;

      VULNERABILITY_PATTERNS.forEach(({ pattern, type, severity, description }) => {
        const matches = content.match(pattern);
        if (matches) {
          matches.forEach((match: string, index: number) => {
            const lines = content.substring(0, content.indexOf(match)).split('\n');
            const vulnerability: Vulnerability = {
              id: `vuln-${file.id}-${type}-${index}`,
              severity,
              type,
              file: file.name || file.path,
              line: lines.length,
              description: `${description}: "${match.substring(0, 50)}${match.length > 50 ? '...' : ''}"`,
              fix: getFix(type),
              references: getReferences(type),
            };

            fileVulnerabilities.push(vulnerability);
            onVulnerabilityFound?.(vulnerability);
          });
        }
      });

      // Check for outdated dependencies
      if (file.name === 'package.json' || file.name === 'requirements.txt') {
        // Mock check for vulnerable dependencies
        const mockVulnerableDeps = [
          { name: 'lodash', version: '4.17.11', cve: 'CVE-2019-10744' },
          { name: 'minimist', version: '1.2.0', cve: 'CVE-2020-7598' },
        ];

        mockVulnerableDeps.forEach((dep, index) => {
          if (content.includes(dep.name)) {
            fileVulnerabilities.push({
              id: `dep-vuln-${file.id}-${index}`,
              severity: 'high',
              type: 'Vulnerable Dependency',
              file: file.name,
              description: `Vulnerable dependency: ${dep.name}@${dep.version}`,
              cve: dep.cve,
              fix: `Update ${dep.name} to latest version`,
              references: [`https://nvd.nist.gov/vuln/detail/${dep.cve}`],
            });
          }
        });
      }

      return fileVulnerabilities;
    },
    [onVulnerabilityFound]
  );

  const getFix = (type: string): string => {
    const fixes: Record<string, string> = {
      'SQL Injection': 'Use parameterized queries or prepared statements',
      'Cross-Site Scripting (XSS)': 'Sanitize user input and use safe DOM methods',
      'Hardcoded Secrets': 'Use environment variables or secure key management',
      'Weak Cryptography': 'Use strong algorithms like SHA-256 or AES',
      'Path Traversal': 'Validate and sanitize file paths',
      'Command Injection': 'Avoid shell commands or use safe alternatives',
      'Insecure Deserialization': 'Validate and sanitize serialized data',
      'CORS Misconfiguration': 'Specify allowed origins explicitly',
    };
    return fixes[type] || 'Review and fix the security issue';
  };

  const getReferences = (type: string): string[] => {
    const refs: Record<string, string[]> = {
      'SQL Injection': ['https://owasp.org/www-community/attacks/SQL_Injection'],
      'Cross-Site Scripting (XSS)': ['https://owasp.org/www-community/attacks/xss/'],
      'Hardcoded Secrets': [
        'https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password',
      ],
      'Command Injection': ['https://owasp.org/www-community/attacks/Command_Injection'],
    };
    return refs[type] || [];
  };

  const startScan = async () => {
    setIsScanning(true);
    setScanProgress(0);
    setVulnerabilities([]);

    const startTime = Date.now();
    const allVulnerabilities: Vulnerability[] = [];

    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      const fileVulnerabilities = scanFile(file);
      allVulnerabilities.push(...fileVulnerabilities);

      setScanProgress(((i + 1) / files.length) * 100);
      setVulnerabilities([...allVulnerabilities]);

      // Simulate processing delay
      await new Promise(resolve => setTimeout(resolve, 50));
    }

    const scanDuration = Date.now() - startTime;

    // Calculate security score (100 - penalty for vulnerabilities)
    const criticalPenalty = allVulnerabilities.filter(v => v.severity === 'critical').length * 20;
    const highPenalty = allVulnerabilities.filter(v => v.severity === 'high').length * 10;
    const mediumPenalty = allVulnerabilities.filter(v => v.severity === 'medium').length * 5;
    const lowPenalty = allVulnerabilities.filter(v => v.severity === 'low').length * 2;

    const securityScore = Math.max(
      0,
      100 - criticalPenalty - highPenalty - mediumPenalty - lowPenalty
    );

    const report: ScanReport = {
      totalVulnerabilities: allVulnerabilities.length,
      critical: allVulnerabilities.filter(v => v.severity === 'critical').length,
      high: allVulnerabilities.filter(v => v.severity === 'high').length,
      medium: allVulnerabilities.filter(v => v.severity === 'medium').length,
      low: allVulnerabilities.filter(v => v.severity === 'low').length,
      info: allVulnerabilities.filter(v => v.severity === 'info').length,
      vulnerabilities: allVulnerabilities,
      scanDuration,
      filesScanned: files.length,
      securityScore,
    };

    setScanReport(report);
    onScanComplete?.(report);
    setIsScanning(false);
  };

  const getSeverityColor = (severity: string) => {
    const colors = {
      critical: 'text-red-600 bg-red-50',
      high: 'text-orange-600 bg-orange-50',
      medium: 'text-yellow-600 bg-yellow-50',
      low: 'text-blue-600 bg-blue-50',
      info: 'text-gray-600 bg-gray-50',
    };
    return colors[severity as keyof typeof colors] || colors.info;
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical':
        return <XCircle className="w-4 h-4 text-red-600" />;
      case 'high':
        return <AlertTriangle className="w-4 h-4 text-orange-600" />;
      case 'medium':
        return <AlertTriangle className="w-4 h-4 text-yellow-600" />;
      case 'low':
        return <Info className="w-4 h-4 text-blue-600" />;
      default:
        return <Info className="w-4 h-4 text-gray-600" />;
    }
  };

  const filteredVulnerabilities = vulnerabilities.filter(
    v => filterSeverity === 'all' || v.severity === filterSeverity
  );

  const exportReportJSON = () => {
    if (!scanReport) return;

    const exportData = {
      generatedAt: new Date().toISOString(),
      scanReport,
      vulnerabilities: vulnerabilities,
      summary: {
        totalFiles: files.length,
        totalVulnerabilities: vulnerabilities.length,
        criticalCount: scanReport.critical,
        highCount: scanReport.high,
        mediumCount: scanReport.medium,
        lowCount: scanReport.low,
        securityScore: scanReport.securityScore,
      },
    };

    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `vulnerability-scan-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const exportReportCSV = () => {
    if (!vulnerabilities.length) return;

    const headers = ['ID', 'Severity', 'Type', 'File', 'Line', 'Description', 'CVE', 'Fix'];
    const csvRows = [headers.join(',')];

    vulnerabilities.forEach(vuln => {
      const row = [
        vuln.id,
        vuln.severity,
        `"${vuln.type}"`,
        `"${vuln.file}"`,
        vuln.line || '',
        `"${vuln.description.replace(/"/g, '""')}"`,
        vuln.cve || '',
        `"${(vuln.fix || '').replace(/"/g, '""')}"`,
      ];
      csvRows.push(row.join(','));
    });

    const blob = new Blob([csvRows.join('\n')], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `vulnerability-scan-${new Date().toISOString().split('T')[0]}.csv`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-6">
      <Card className="border-2">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Shield className="w-5 h-5 text-red-600" />
            Security Vulnerability Scanner
            <Badge variant="outline" className="ml-auto">
              OWASP Compliant
            </Badge>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Scan Controls */}
          <div className="flex items-center justify-between">
            <div className="text-sm">
              <span className="font-medium">{files.length}</span> files ready to scan
            </div>
            <div className="flex gap-2">
              {scanReport && (
                <>
                  <Button
                    onClick={exportReportJSON}
                    variant="outline"
                    size="sm"
                    className="flex items-center gap-2"
                  >
                    <Zap className="w-4 h-4" />
                    Export JSON
                  </Button>
                  <Button
                    onClick={exportReportCSV}
                    variant="outline"
                    size="sm"
                    className="flex items-center gap-2"
                  >
                    <FileWarning className="w-4 h-4" />
                    Export CSV
                  </Button>
                </>
              )}
              <Button
                onClick={startScan}
                disabled={isScanning || files.length === 0}
                className="flex items-center gap-2"
              >
                {isScanning ? (
                  <>
                    <Search className="w-4 h-4 animate-spin" />
                    Scanning...
                  </>
                ) : (
                  <>
                    <Search className="w-4 h-4" />
                    Start Security Scan
                  </>
                )}
              </Button>
            </div>
          </div>

          {/* Scan Progress */}
          {isScanning && (
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <span className="text-sm">Scanning for vulnerabilities...</span>
                <span className="text-sm text-muted-foreground">{Math.round(scanProgress)}%</span>
              </div>
              <Progress value={scanProgress} className="h-2" />
            </div>
          )}

          {/* Security Score */}
          {scanReport && (
            <div className="p-4 bg-gradient-to-r from-red-50 to-orange-50 rounded-lg border border-red-200">
              <div className="flex items-center justify-between mb-4">
                <div>
                  <h3 className="font-medium">Security Score</h3>
                  <p className="text-sm text-muted-foreground">
                    Based on {scanReport.filesScanned} files scanned
                  </p>
                </div>
                <div className="text-3xl font-bold">
                  <span
                    className={
                      scanReport.securityScore >= 80
                        ? 'text-green-600'
                        : scanReport.securityScore >= 60
                          ? 'text-yellow-600'
                          : 'text-red-600'
                    }
                  >
                    {scanReport.securityScore}
                  </span>
                  <span className="text-lg text-muted-foreground">/100</span>
                </div>
              </div>

              {/* Vulnerability Summary */}
              <div className="grid grid-cols-5 gap-2">
                <div className="text-center p-2 bg-red-100 rounded">
                  <div className="text-lg font-bold text-red-700">{scanReport.critical}</div>
                  <div className="text-xs text-red-600">Critical</div>
                </div>
                <div className="text-center p-2 bg-orange-100 rounded">
                  <div className="text-lg font-bold text-orange-700">{scanReport.high}</div>
                  <div className="text-xs text-orange-600">High</div>
                </div>
                <div className="text-center p-2 bg-yellow-100 rounded">
                  <div className="text-lg font-bold text-yellow-700">{scanReport.medium}</div>
                  <div className="text-xs text-yellow-600">Medium</div>
                </div>
                <div className="text-center p-2 bg-blue-100 rounded">
                  <div className="text-lg font-bold text-blue-700">{scanReport.low}</div>
                  <div className="text-xs text-blue-600">Low</div>
                </div>
                <div className="text-center p-2 bg-gray-100 rounded">
                  <div className="text-lg font-bold text-gray-700">{scanReport.info}</div>
                  <div className="text-xs text-gray-600">Info</div>
                </div>
              </div>
            </div>
          )}

          {/* Vulnerability List */}
          {vulnerabilities.length > 0 && (
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <h3 className="text-sm font-medium">Vulnerabilities Found</h3>
                <select
                  value={filterSeverity}
                  onChange={e => setFilterSeverity(e.target.value)}
                  className="text-sm border rounded px-2 py-1"
                >
                  <option value="all">All Severities</option>
                  <option value="critical">Critical</option>
                  <option value="high">High</option>
                  <option value="medium">Medium</option>
                  <option value="low">Low</option>
                  <option value="info">Info</option>
                </select>
              </div>

              <div className="space-y-2 max-h-96 overflow-y-auto">
                {filteredVulnerabilities.map(vuln => (
                  <div
                    key={vuln.id}
                    className="p-3 border rounded-lg hover:bg-muted/50 cursor-pointer transition-colors"
                    onClick={() => setSelectedVulnerability(vuln)}
                  >
                    <div className="flex items-start gap-3">
                      {getSeverityIcon(vuln.severity)}
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center gap-2">
                          <span className="font-medium text-sm">{vuln.type}</span>
                          <Badge className={`text-xs ${getSeverityColor(vuln.severity)}`}>
                            {vuln.severity}
                          </Badge>
                          {vuln.cve && (
                            <Badge variant="outline" className="text-xs">
                              {vuln.cve}
                            </Badge>
                          )}
                        </div>
                        <div className="text-xs text-muted-foreground mt-1">
                          <FileWarning className="w-3 h-3 inline mr-1" />
                          {vuln.file} {vuln.line && `• Line ${vuln.line}`}
                        </div>
                        <p className="text-sm mt-2">{vuln.description}</p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Selected Vulnerability Details */}
          {selectedVulnerability && (
            <Alert>
              <AlertTriangle className="w-4 h-4" />
              <AlertTitle>Vulnerability Details</AlertTitle>
              <AlertDescription className="mt-3 space-y-3">
                <div>
                  <strong>Type:</strong> {selectedVulnerability.type}
                </div>
                <div>
                  <strong>File:</strong> {selectedVulnerability.file}
                  {selectedVulnerability.line && ` (Line ${selectedVulnerability.line})`}
                </div>
                <div>
                  <strong>Description:</strong> {selectedVulnerability.description}
                </div>
                {selectedVulnerability.fix && (
                  <div>
                    <strong>Recommended Fix:</strong> {selectedVulnerability.fix}
                  </div>
                )}
                {selectedVulnerability.references &&
                  selectedVulnerability.references.length > 0 && (
                    <div>
                      <strong>References:</strong>
                      <ul className="list-disc list-inside mt-1">
                        {selectedVulnerability.references.map((ref, index) => (
                          <li key={index}>
                            <a
                              href={ref}
                              target="_blank"
                              rel="noopener noreferrer"
                              className="text-blue-600 hover:underline text-xs"
                            >
                              {ref}
                            </a>
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
              </AlertDescription>
            </Alert>
          )}

          {/* No Vulnerabilities State */}
          {!isScanning && vulnerabilities.length === 0 && files.length > 0 && (
            <div className="text-center py-8">
              <CheckCircle className="w-12 h-12 mx-auto mb-4 text-green-600" />
              <p className="text-muted-foreground">No vulnerabilities detected</p>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
